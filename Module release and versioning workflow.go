package golang
Module release and versioning workflow
当您开发供其他开发人员使用的模块时，您可以遵循有助于确保使用该模块的开发人员获得可靠、一致体验的工作流程。本主题描述了该工作流中的高级步骤。
有关模块开发的概述，请参阅开发和发布模块。
See also
	1.如果您只想在代码中使用外部包，请务必参阅管理依赖项。
	2.对于每个新版本，您都用版本号表示对模块的更改。有关更多信息，请参阅模块版本编号。

Common workflow steps
以下序列说明了示例新模块的发布和版本控制工作流步骤。有关每个步骤的更多信息，请参阅本主题中的部分。
	1.开始一个模块并组织它的源代码，使开发人员更容易使用和维护。
	如果您是开发模块的新手，请查看教程：创建 Go 模块。
	在 Go 的去中心化模块发布系统中，如何组织代码很重要。有关更多信息，请参阅管理模块源。
	2.设置为编写调用未发布模块中函数的本地客户端代码。
	在您发布模块之前，使用 go get 等命令的典型依赖管理工作流程无法使用它。在此阶段测试模块代码的一个好方法是在它位于调用代码的本地目录中时进行尝试。
	有关本地开发的更多信息，请参阅针对未发布的模块进行编码。
	3.当模块的代码准备好供其他开发人员试用时，开始发布 v0 预发布版，例如 alpha 和 beta。有关更多信息，请参阅发布预发布版本。
	4.发布不保证稳定但用户可以试用的 v0。有关更多信息，请参阅发布第一个（不稳定的）版本。
	5.在您的 v0 版本发布后，您可以（并且应该！）继续发布它的新版本。
	这些新版本可能包括错误修复（补丁版本）、模块公共 API 的添加（次要版本），甚至是重大更改。 由于 v0 版本不保证稳定性或向后兼容性，您可以对其版本进行重大更改。
	有关更多信息，请参阅发布错误修复和发布非破坏性 API 更改。
	6.当您准备发布稳定版本时，您可以将预发布版本发布为 alpha 和 beta。有关更多信息，请参阅发布预发布版本。
	7.发布 v1 作为第一个稳定版本。
	这是第一个对模块稳定性做出承诺的版本。有关更多信息，请参阅发布第一个稳定版本。
	8.在 v1 版本中，继续修复错误，并在必要时对模块的公共 API 进行添加。
	有关更多信息，请参阅发布错误修复和发布非破坏性 API 更改。
	9.如果无法避免，请在新的主要版本中发布重大更改。
	主要版本更新——例如从 v1.x.x 到 v2.x.x——对你的模块用户来说可能是一个非常具有破坏性的升级。这应该是最后的手段。有关更多信息，请参阅发布重大 API 更改。

Coding against an unpublished module
当您开始开发模块或模块的新版本时，您还没有发布它。 在发布模块之前，您将无法使用 Go 命令将模块添加为依赖项。 相反，首先，当在调用未发布模块中的函数的不
同模块中编写客户端代码时，您需要在本地文件系统上引用该模块的副本。

您可以在客户端模块的 go.mod 文件中使用 replace 指令从客户端模块的 go.mod 文件中本地引用模块。有关更多信息，请参阅要求本地目录中的模块代码。

Publishing pre-release versions
您可以发布预发布版本以使模块可供其他人试用并向您提供反馈。预发布版本不保证稳定性。
预发布版本号附加有预发布标识符。有关版本号的更多信息，请参阅模块版本编号。
这里有两个例子：
	v0.2.1-beta.1
	v1.2.3-alpha

在提供预发布版时，请记住，使用预发布版的开发人员需要使用 go get 命令按版本明确指定它。 这是因为，默认情况下，go 命令在查找您要查找的模块时更喜欢发布
版本而不是预发布版本。 因此开发者必须通过显式指定来获取预发布版，如下例所示：
	go get example.com/theirmodule@v1.2.3-alpha
您通过标记存储库中的模块代码来发布预发布，并在标签中指定预发布标识符。有关更多信息，请参阅发布模块。

Publishing the first (unstable) version
当您发布预发布版本时，您可以发布不保证稳定性或向后兼容性的发布版本，但让您的用户有机会试用该模块并向您提供反馈。

不稳定版本是那些版本号在 v0.x.x 范围内的版本。 v0 版本不提供稳定性或向后兼容性保证。 但它为您提供了一种在对 v1 及更高版本做出稳定性承诺之前获得反馈
和改进 API 的方法。 有关更多信息，请参阅模块版本编号。

与其他已发布版本一样，您可以在为发布稳定的 v1 版本做出更改时增加 v0 版本号的次要和补丁部分。 例如，在发布 v.0.0.0 之后，您可能会发布带有第一组错误修复的 v0.0.1。
这是一个示例版本号：
	v0.1.3
您通过标记存储库中的模块代码并在标记中指定 v0 版本号来发布不稳定版本。有关更多信息，请参阅发布模块。

Publishing the first stable version
您的第一个稳定版本将具有 v1.x.x 版本号。第一个稳定版本是在预发布和 v0 版本之后发布的，您可以通过这些版本获得反馈、修复错误并为用户稳定模块。
对于 v1 版本，您向使用您的模块的开发人员做出以下承诺：
	1.他们可以在不破坏自己代码的情况下升级到主要版本的后续次要版本和补丁版本。
	2.您不会对模块的公共 API（包括其函数和方法签名）进行进一步更改，从而破坏向后兼容性。
	3.您不会删除任何导出类型，这会破坏向后兼容性。
	4.未来对 API 的更改（例如向结构体添加新字段）将向后兼容，并将包含在新的次要版本中。
	5.错误修复（例如安全修复）将包含在补丁版本中或作为次要版本的一部分。
注意：虽然您的第一个主要版本可能是 v0 版本，但 v0 版本并不表示稳定性或向后兼容性保证。 因此，当您从 v0 增加到 v1 时，您不必担心破坏向后兼容性，因为 v0 版本被认为是不稳定的。
有关版本号的更多信息，请参阅模块版本编号。
这是一个稳定版本号的示例：
	v1.0.0
您通过标记存储库中的模块代码并在标记中指定 v1 版本号来发布第一个稳定版本。有关更多信息，请参阅发布模块。

Publishing bug fixes
您可以发布一个版本，其中的更改仅限于错误修复。这称为补丁版本。
补丁版本仅包含较小的更改。特别是，它不包括对模块公共 API 的更改。使用代码的开发人员可以安全地升级到此版本，而无需更改他们的代码。
注意：你的补丁版本应该尽量不要升级任何模块自己的传递依赖超过一个补丁版本。 否则，升级到你的模块补丁的人可能会意外地对他们使用的传递依赖项进行更具侵入性的更改。
补丁版本会增加模块版本号的补丁部分。有关更多信息，请参阅模块版本编号。
在以下示例中，v1.0.1 是补丁版本。
旧版本：v1.0.0
新版本：v1.0.1
您通过在存储库中标记模块代码并增加标记中的补丁版本号来发布补丁版本。有关更多信息，请参阅发布模块。

Publishing non-breaking API changes
您可以对模块的公共 API 进行非破坏性更改，并在次要版本中发布这些更改。

此版本更改了 API，但并未以破坏调用代码的方式进行更改。 这可能包括更改模块自身的依赖项或添加新函数、方法、结构字段或类型。 即使包含更改，这种版本也保证
了调用模块函数的现有代码的向后兼容性和稳定性。

次要版本会增加模块版本号的次要部分。有关更多信息，请参阅模块版本编号。
在以下示例中，v1.1.0 是次要版本。
旧版本：v1.0.1
新版本：v1.1.0
您通过在存储库中标记模块代码并增加标记中的次要版本号来发布次要版本。有关更多信息，请参阅发布模块。

Publishing breaking API changes
您可以通过发布主要版本发布来发布破坏向后兼容性的版本。
主要版本发布不保证向后兼容性，通常是因为它包含对模块公共 API 的更改，这些更改会破坏使用模块先前版本的代码。

鉴于主要版本升级可能对依赖模块的代码产生破坏性影响，您应该尽可能避免主要版本更新。 有关主要版本更新的更多信息，请参阅开发主要版本更新。 有关避免进行重
大更改的策略，请参阅博客文章保持模块兼容。

发布其他类型的版本基本上需要用版本号标记模块代码，发布主要版本更新需要更多步骤。
	1.在开始开发新的主要版本之前，在您的存储库中为新版本的源代码创建一个位置。
	一种方法是在您的存储库中创建一个新分支，专门用于新的主要版本及其后续的次要版本和补丁版本。有关更多信息，请参阅管理模块源。
	2.在模块的 go.mod 文件中，修改模块路径以附加新的主版本号，如以下示例所示：
		example.com/mymodule/v2
	鉴于模块路径是模块的标识符，此更改有效地创建了一个新模块。 它还更改了包路径，确保开发人员不会无意中导入破坏其代码的版本。 相反，那些想要升级的人会明确地将旧路径替换为新路径。
	3.在您的代码中，更改要在要更新的模块中导入包的所有包路径，包括要更新的模块中的包。您需要这样做，因为您更改了模块路径。
	4.与任何新版本一样，您应该在发布正式版本之前发布预发布版本以获取反馈和错误报告。
	5.通过标记存储库中的模块代码来发布新的主要版本，增加标记中的主要版本号——例如从 v1.5.2 到 v2.0.0。
有关更多信息，请参阅发布模块。
